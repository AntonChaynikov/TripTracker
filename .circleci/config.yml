version: 2

references:

  ## Cache

  cache_key: &cache_key
    key: cache-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}-{{ checksum "build.gradle" }}-{{ checksum "app/build.gradle" }}
  restore_cache: &restore_cache
    restore_cache:
      <<: *cache_key
  save_cache: &save_cache
    save_cache:
      <<: *cache_key
      paths:
        - ~/.gradle
        - ~/.m2

  ## Workspace

  workspace: &workspace
    ~/workspace
  attach_debug_workspace: &attach_debug_workspace
    attach_workspace:
      at: *workspace
  attach_release_workspace: &attach_release_workspace
    attach_workspace:
      at: *workspace
  persist_debug_workspace: &persist_debug_workspace
    persist_to_workspace:
      root: *workspace
      paths:
        - app/build/intermediates
        - app/build/outputs/androidTest-results
        - app/build/outputs/apk
        - app/build/outputs/code-coverage
        - app/build/test-results
  persist_release_workspace: &persist_release_workspace
    persist_to_workspace:
      root: *workspace
      paths:
        - app/build
  attach_firebase_workspace: &attach_firebase_workspace
    attach_workspace:
      at: *workspace
  persist_firebase_workspace: &persist_firebase_workspace
    persist_to_workspace:
      root: *workspace
      paths:
        - firebase

  ## Docker image configurations

  android_config: &android_config
    working_directory: *workspace
    docker:
      - image: circleci/android:api-27-alpha
    environment:
      TERM: dumb
      _JAVA_OPTIONS: "-Xmx2048m -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap"
      GRADLE_OPTS: '-Dorg.gradle.jvmargs="-Xmx2048m"'
  gcloud_config: &gcloud_config
    working_directory: *workspace
    docker:
      - image: google/cloud-sdk:latest
    environment:
      TERM: dumb

## Keys

  # Google Cloud Service

  decode_gcloud_key: &decode_gcloud_key
    run:
      name: Decode Google Cloud credentials
      command: echo $GCLOUD_SERVICE_KEY | base64 -di > $HOME/client-secret.json

  # Google Play Service acc key

  decode_gplay_key: &decode_gplay_key
    run:
      name: Decode Google Play service acc key
      command: echo $GSTORE_KEY | base64 -di > $HOME/$GSTORE_KEY_PATH

  # Android signing key

  decode_signing_key: &decode_signing_key
    run:
      name: Decode Android signing key
      command: echo $SIGNING_KEY | base64 -di > key-store.jks
    run:
      name: Validate key
      command: ls
    run:
      name: Validate key
      command: echo $SIGNING_KEY

jobs:

  ## Build debug APK and instrumented test APK

  build_debug:
    <<: *android_config
    steps:
      - checkout
      - *restore_cache
      - run:
          name: Download dependencies
          command: ./gradlew androidDependencies
      - *save_cache
      - run:
          name: Gradle build (debug)
          command: ./gradlew -PciBuild=true :app:assembleDebug :app:assembleAndroidTest
      - *persist_debug_workspace
      - store_artifacts:
          path: app/build/outputs/apk/
          destination: /apk/

  ## Build release APK

  build_release:
    <<: *android_config
    steps:
      - checkout
      - *restore_cache
      - *decode_signing_key
      - run:
          name: Download dependencies
          command: ./gradlew androidDependencies
      - *save_cache
      - run:
          name: Gradle build (release)
          command: ./gradlew -PciBuild=true :app:assembleRelease
      - *persist_release_workspace
      - store_artifacts:
          path: app/build/outputs/apk/
          destination: /apk/
      - store_artifacts:
          path: app/build/outputs/mapping/
          destination: /mapping/

  ## Run unit tests

  test_unit:
    <<: *android_config
    steps:
      - checkout
      - *restore_cache
      - run:
          name: Download dependencies
          command: ./gradlew androidDependencies
      - *save_cache
      - run:
          name: Run platform unit tests
          command: ./gradlew -PciBuild=true :app:testPlatformDebugUnitTest
      - run:
          name: Run servicesApi unit tests
          command: ./gradlew -PciBuild=true :app:testServicesApiDebugUnitTest
      - *persist_debug_workspace
      - store_artifacts:
          path: app/build/reports/
          destination: /reports/
      - store_test_results:
          path: app/build/test-results/
          destination: /test-results/

  ## Run instrumented tests

  test_instrumented:
    <<: *gcloud_config
    steps:
      - *attach_debug_workspace
      - *decode_gcloud_key
      - run:
          name: Authenticate with Google Cloud
          command: gcloud auth activate-service-account firebase-adminsdk-3zsqi@gps-trip-logger.iam.gserviceaccount.com --key-file $HOME/client-secret.json
      - run:
          name: Set Google Cloud target project
          command: gcloud config set project  gps-trip-logger
      - run:
          name: Run platform instrumented test on Firebase Test Lab
          command: gcloud firebase test android run --app app/build/outputs/apk/platform/debug/*debug.apk --test app/build/outputs/apk/androidTest/platform/debug/*androidTest.apk --device model=sailfish,version=26,locale=en_US,orientation=portrait --no-record-video --environment-variables coverage=true,coverageFile=/sdcard/coverage.ec --directories-to-pull=/sdcard --timeout 20m
      - run:
          name: Run servicesApi instrumented test on Firebase Test Lab
          command: gcloud firebase test android run --app app/build/outputs/apk/servicesApi/debug/*debug.apk --test app/build/outputs/apk/androidTest/servicesApi/debug/*androidTest.apk --device model=sailfish,version=26,locale=en_US,orientation=portrait --no-record-video --environment-variables coverage=true,coverageFile=/sdcard/coverage.ec --directories-to-pull=/sdcard --timeout 20m
      - run:
          name: Create directory to store test results
          command: mkdir firebase
      - run:
          name: Download instrumented test results from Firebase Test Lab
          command: gsutil -m cp -r -U "`gsutil ls gs://test-lab-9td3tnt7fd09a-kqr91929f8ba0 | tail -1`*" /root/workspace/firebase/
      - *persist_firebase_workspace
      - store_artifacts:
          path: firebase/
          destination: /firebase/

  ## Deploy release APK to Google Play Alpha

  deploy:
    <<: *android_config
    steps:
      - checkout
      - *attach_release_workspace
      - *restore_cache
      - run:
          name: Download dependencies
          command: ./gradlew androidDependencies
      - run:
          name: Commenting
          command: echo 'Deploying'
      - run:
          name: Deploy to Google Play alpha
          command: ./gradlew publishRelease

workflows:
  version: 2
  workflow:
    jobs:
    - build_debug
    - build_release
    - test_unit:
        requires:
          - build_debug
    - test_instrumented:
        requires:
          - build_debug
    - deploy:
        filters:
          branches:
            only:
              - master
        requires:
          - build_release
          - test_unit
          - test_instrumented