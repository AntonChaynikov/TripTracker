apply plugin: 'com.android.application'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-android'
apply plugin: 'jacoco-android'
apply from: '../checkstyle/checkstyle.gradle'
apply plugin: 'io.fabric'
apply plugin: "androidx.navigation.safeargs"
apply plugin: 'kotlin-kapt'
apply plugin: 'com.antonchaynikov.oneclickpublish'

def keystorePropertiesFile = rootProject.file("keystore.properties")
def keystoreProperties = new Properties()

def versionPropertiesFilePath = "version.properties"

project.ext.versionPropertiesFile = rootProject.file(versionPropertiesFilePath)
project.ext.versionProperties = new Properties()
versionProperties.load(new FileInputStream(versionPropertiesFile))

project.ext.versionMajor = Integer.parseInt(versionProperties['versionMajor'])
project.ext.versionMinor = Integer.parseInt(versionProperties['versionMinor'])
project.ext.versionPatch = Integer.parseInt(versionProperties['versionPatch'])
project.ext.versionBuild = Integer.parseInt(versionProperties['versionBuild'])

keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

oneClickPublish {
    branchName = "master"
    versionFilePath = versionPropertiesFilePath
    remoteRepoName = "origin"
}

jacoco {
    toolVersion = "0.8.0"
}

android {
    compileSdkVersion 28

    defaultConfig {
        applicationId "com.antonchaynikov.triptracker"
        minSdkVersion 19
        targetSdkVersion 28
        versionCode versionMajor * 100000 + versionMinor * 10000 + versionPatch * 1000 + versionBuild
        versionName "${versionMajor}.${versionMinor}.${versionPatch}.${versionBuild}"
        setProperty("archivesBaseName", "$rootProject.name-v$versionName")
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }

    flavorDimensions "LocationServiceType"
    productFlavors {
        platform {
            dimension "LocationServiceType"
            applicationIdSuffix ".platform"
        }
        servicesApi {
            dimension "LocationServiceType"
            applicationIdSuffix ".servicesApi"
        }
    }

    buildTypes {
        debug {
            testCoverageEnabled true
            minifyEnabled false
            multiDexEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled true
            multiDexEnabled true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    testOptions {
        unitTests {
            returnDefaultValues = true
        }
    }

    kapt {
        generateStubs = true
    }

    lintOptions {
        lintConfig file("../lintConfig.xml")
        warningsAsErrors true
    }

    useLibrary 'android.test.runner'
    useLibrary 'android.test.base'
    useLibrary 'android.test.mock'
}

ext {
    ANDROIDX_APPCOMPAT = '1.0.2'
    ANDROIDX_SUPPORT_V4 =  '1.0.0'
    CONSTRAINT_LAYOUT = '2.0.0-alpha3'
    RX_JAVA = '2.1.16'
    RX_ANDROID = '2.1.0'
    GOOGLE_MAPS_SDK = '16.0.0'
    GOOGLE_PLAY_SERVICES_BASE = '16.1.0'
    FIREBASE_CORE = '16.0.6'
    FIREBASE_UI_AUTH = '4.3.1'
    FIREBASE_FIRESTORE = '17.1.5'
    ROOM = '2.1.0-alpha03'
    GOOGLE_PALY_SERVICES_LOCATION = '16.0.0'
    GOOGLE_PALY_SERVICES_LOCATION = '16.0.0'
    JODA_TIME = '2.10.1'
    JODA_CONVERT = '2.1.2'
    MOCKITO_CORE = '2.23.4'
    MOCKITO_INLINE = '2.13.0';
    MOCKITO_ANDROID = '2.24.5'
    JUNIT = '4.12'
    ANDROIDX_TEST_RUNNER = '1.1.0'
    ESPRESSO_CORE = '3.1.0'
    ESPRESSO_IDLING_RESOURCE = '3.1.1';
    CRASHLYTICS = '2.9.8'
    ANDROID_TEST_CORE = '1.0.0'
    ANDROID_TEST_RULES = '1.1.0'
    DAGGER = '2.21'
    FRAGMENT_TESTING = '1.1.0-alpha05'
    NAV_COMPONENTS = "2.1.0-alpha01"
    DAGGER_MOCK = "0.8.5"
    MULTIDEX = "1.0.3"
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "androidx.appcompat:appcompat:$ANDROIDX_APPCOMPAT"
    implementation "androidx.legacy:legacy-support-v4:$ANDROIDX_SUPPORT_V4"
    implementation "androidx.constraintlayout:constraintlayout:$CONSTRAINT_LAYOUT"
    implementation "io.reactivex.rxjava2:rxjava:$RX_JAVA"
    implementation "io.reactivex.rxjava2:rxandroid:$RX_ANDROID"
    implementation "com.google.android.gms:play-services-maps:$GOOGLE_MAPS_SDK"
    implementation "com.google.firebase:firebase-core:$FIREBASE_CORE"
    implementation "com.firebaseui:firebase-ui-auth:$FIREBASE_UI_AUTH"
    implementation "com.google.android.gms:play-services-base:$GOOGLE_PLAY_SERVICES_BASE"
    implementation "com.google.android.gms:play-services-location:$GOOGLE_PALY_SERVICES_LOCATION"
    implementation "com.google.firebase:firebase-firestore:$FIREBASE_FIRESTORE"
    implementation "joda-time:joda-time:$JODA_TIME"
    implementation "org.joda:joda-convert:$JODA_CONVERT:classic"
    implementation "com.crashlytics.sdk.android:crashlytics:$CRASHLYTICS"
    implementation "com.google.dagger:dagger:$DAGGER"
    implementation "androidx.test.espresso:espresso-idling-resource:$ESPRESSO_IDLING_RESOURCE"
    implementation "androidx.navigation:navigation-fragment:$NAV_COMPONENTS"
    implementation "androidx.navigation:navigation-ui:$NAV_COMPONENTS"
    implementation "com.android.support:multidex:$MULTIDEX"

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$KOTLIN_VERSION"

    debugImplementation "androidx.fragment:fragment-testing:$FRAGMENT_TESTING"

    kapt "com.google.dagger:dagger-compiler:$DAGGER"
    kapt "com.google.dagger:dagger-android-processor:$DAGGER"

    testImplementation "org.mockito:mockito-core:$MOCKITO_CORE"
    testImplementation "junit:junit:$JUNIT"
    testImplementation "org.mockito:mockito-inline:$MOCKITO_INLINE"
    testImplementation "com.github.fabioCollini.daggermock:daggermock:$DAGGER_MOCK"

    androidTestImplementation "com.github.fabioCollini.daggermock:daggermock:$DAGGER_MOCK"
    androidTestImplementation "org.mockito:mockito-core:$MOCKITO_CORE"
    androidTestImplementation "org.mockito:mockito-android:$MOCKITO_ANDROID"
    androidTestImplementation 'androidx.test:core:1.1.0'
    androidTestImplementation 'androidx.test:rules:1.1.1'
    androidTestImplementation "androidx.test:runner:$ANDROIDX_TEST_RUNNER"
    androidTestImplementation "androidx.test.espresso:espresso-core:$ESPRESSO_CORE"
}

apply plugin: 'com.google.gms.google-services'
